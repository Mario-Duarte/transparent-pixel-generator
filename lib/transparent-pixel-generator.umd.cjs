(function(i,o){typeof exports=="object"&&typeof module<"u"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(i=typeof globalThis<"u"?globalThis:i||self,o(i.transparentPixelGenerator={}))})(this,function(i){"use strict";function o(a){let r=a.startsWith("#")?a.slice(1):a;if(r.length===3&&(r=r.split("").map(s=>s+s).join("")),!/^[a-f\d]{6}$/i.test(r))return null;const e=parseInt(r,16),f=e>>16&255,c=e>>8&255,l=e&255;return{r:f,g:c,b:l}}function g({width:a=1,height:r=1,color:e="#ffffff",alpha:f=0}){let{r:c,g:l,b:s}={r:255,g:255,b:255};const h=typeof f=="number"&&!isNaN(f)?Math.max(0,Math.min(1,f)):0;if(typeof e=="string"&&e.startsWith("#")){const t=o(e);t&&(c=t.r,l=t.g,s=t.b)}else{const t=e.match(/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/);if(t)c=parseInt(t[1],10),l=parseInt(t[2],10),s=parseInt(t[3],10);else throw new Error("Invalid color format. Use valid hex or rgb formats.")}const n=document.createElement("canvas");n.width=a,n.height=r;const d=n.getContext("2d");if(!d)throw new Error("Failed to get canvas context");return d.clearRect(0,0,n.width,n.height),d.fillStyle=`rgba(${c}, ${l}, ${s}, ${h})`,d.fillRect(0,0,n.width,n.height),n.toDataURL("image/png")}i.transparentPixelGenerator=g,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
